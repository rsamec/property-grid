{
  "name": "functionally",
  "version": "0.4.1",
  "description": "Functionally - A utility belt for functional JavaScript",
  "main": "index.js",
  "scripts": {
    "build": "browserify index.js -s F -o dist/F.js",
    "test": "make test",
    "test-w": "make test-w",
    "test-debug": "mocha --debug-brk"
  },
  "keywords": [
    "functional",
    "functionally",
    "map",
    "reduce",
    "fn",
    "pure",
    "functions"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/radubrehar/functionally.git"
  },
  "author": {
    "name": "Radu Brehar"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "~1.21.0",
    "should": "~4.0.4"
  },
  "dependencies": {
    "newify": "~1.1.9"
  },
  "readme": "Functionally - A utility belt for functional JavaScript\r\n\r\n# Install\r\n\r\n```sh\r\n$ npm install functionally\r\n```\r\n\r\n# Usage\r\n\r\n```js\r\nvar F = require('functionally')\r\n\r\nfunction log(msg){\r\n    console.log(msg)\r\n}\r\n\r\nfunction greet(name){\r\n    return 'Hello ' + name + '!'\r\n}\r\n\r\nvar logGreeting = F.compose(log, greet)\r\n\r\nlogGreeting('Bob') //console.log('Hello Bob!')\r\n\r\n```\r\n\r\n# API\r\n\r\n## find(fn, target)\r\n\r\nReturns the first object in target for which fn returns a truthy value.\r\n\r\nExample\r\n\r\n```js\r\nF.find(function(obj){\r\n    return obj.name == 'js'\r\n}, [\r\n    {name: 'ruby'},\r\n    {name: 'js'},\r\n    {name: 'php'},\r\n    {name: 'erlang'}\r\n])\r\n//returns the second object in the array\r\n```\r\n\r\nThe ```find``` function is curried, so you can do\r\n```js\r\nvar findFirst = F.find(function(value, index, target){\r\n    if (index === 0){\r\n        return value\r\n    }\r\n})\r\n\r\nfindFirst([4,5,6]) == 4\r\n```\r\n\r\n## once(fn)\r\n\r\nReturns a function that calls fn just once.\r\n\r\nExample\r\n\r\n```js\r\nvar counter = 0\r\n\r\nvar inc = F.once(function(){\r\n    counter++\r\n})\r\n\r\ninc()\r\ncounter == 1\r\n\r\ninc()\r\ninc()\r\n\r\ncounter == 1\r\n```\r\n\r\nThe function returned by once returns the result of the original function. On subsequent calls, returns the same result.\r\n\r\n## maxArgs(fn, count)\r\n\r\nIf you use parseInt as the parameter to array.map, you get an undesired result\r\n```js\r\n['1','2','3'].map(parseInt)\r\n//[1, NaN, NaN]\r\n```\r\nBut if you use maxArgs:\r\n\r\n```js\r\nvar parseInt = F.maxArgs(parseInt, 1)\r\n['1','2','3'].map(parseInt)\r\n//you get [1,2,3], the expected result\r\n```\r\n\r\n## newify(fn, [...args...])\r\n\r\nCreates a new curried function that calls the given fn with the new operator. Expected args are the fn to use for calling new and an array of args to be used (they will be spread on the new call).\r\n\r\nExample:\r\n```js\r\nfunction Developer(name, language){\r\n    this.name = name\r\n    this.lang = language\r\n}\r\n\r\nvar newDev = newify(Developer)\r\n\r\nvar dev = newDev(['bob', 'js'])\r\nvar dev2 = newify(Developer, ['john', 'c#'])\r\n\r\ndev instanceof Developer === true\r\ndev2 instanceof Developer === true\r\n```\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/radubrehar/functionally/issues"
  },
  "_id": "functionally@0.4.1",
  "dist": {
    "shasum": "b990fad2202a5234d15d9d7116915e7ca93ef88d"
  },
  "_from": "functionally@~0.4.1",
  "_resolved": "https://registry.npmjs.org/functionally/-/functionally-0.4.1.tgz"
}
